name: "VGG_CNN_M_1024 train"
layer {
  name: 'input-data'
  type: 'Python'
  top: 'data'
  top: 'im_info'
  top: 'gt_boxes'
  python_param {
    module: 'roi_data_layer.layer'
    layer: 'RoIDataLayer'
    param_str: "'num_classes': 41"
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    kernel_size: 7
    stride: 2
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "norm1"
  type: "LRN"
  bottom: "conv1"
  top: "norm1"
  lrn_param {
    local_size: 5
    alpha: 0.0005
    beta: 0.75
    k: 2
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "norm1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 5
    stride: 2
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "norm2"
  type: "LRN"
  bottom: "conv2"
  top: "norm2"
  lrn_param {
    local_size: 5
    alpha: 0.0005
    beta: 0.75
    k: 2
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "norm2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "conv3"
  top: "conv4"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}
layer {
  name: "conv5"
  type: "Convolution"
  bottom: "conv4"
  top: "conv5"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "conv5"
  top: "conv5"
}

#========= rmpn ============

layer {
  name: "rmpn_conv/3x3"
  type: "Convolution"
  bottom: "conv5"
  top: "rmpn/output"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 256
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "rmpn_relu/3x3"
  type: "ReLU"
  bottom: "rmpn/output"
  top: "rmpn/output"
}
layer {
  name: "rmpn_cls_score"
  type: "Convolution"
  bottom: "rmpn/output"
  top: "rmpn_cls_score"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 18   # 2(bg/fg) * 9(anchors)
    kernel_size: 1 pad: 0 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
   bottom: "rmpn_cls_score"
   top: "rmpn_cls_score_reshape"
   name: "rmpn_cls_score_reshape"
   type: "Reshape"
   reshape_param { shape { dim: 0 dim: 2 dim: -1 dim: 0 } }
}

layer {
  name: "rmpn_method_score"
  type: "Convolution"
  bottom: "rmpn/output"
  top: "rmpn_method_score"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 18   # 2(bg/fg) * 9(anchors)
    kernel_size: 1 pad: 0 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
   bottom: "rmpn_method_score"
   top: "rmpn_method_score_reshape"
   name: "rmpn_method_score_reshape"
   type: "Reshape"
   reshape_param { shape { dim: 0 dim: 2 dim: -1 dim: 0 } }
}

layer {
  name: "rmpn_bbox_pred"
  type: "Convolution"
  bottom: "rmpn/output"
  top: "rmpn_bbox_pred"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 36   # 4 * 9(anchors)
    kernel_size: 1 pad: 0 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}


layer {
  name: 'rmpn-data'
  type: 'Python'
  bottom: 'rmpn_cls_score'
  bottom: 'gt_boxes'
  bottom: 'im_info'
  bottom: 'data'
  top: 'rmpn_labels'
  top: 'rmpn_bbox_targets'
  top: 'rmpn_bbox_inside_weights'
  top: 'rmpn_bbox_outside_weights'
  python_param {
    module: 'rmpn.anchor_target_layer'
    layer: 'AnchorTargetLayer'
    param_str: "'feat_stride': 16"
  }
}

layer {
  name: "loss_rmpn_cls"
  type: "SoftmaxWithLoss"
  bottom: "rmpn_cls_score_reshape"
  bottom: "rmpn_labels"
  propagate_down: 1
  propagate_down: 0
  top: "loss_rmpn_cls"
  loss_weight: 1
  loss_param {
    ignore_label: -1
    normalize: true
  }
}

layer {
  name: "loss_rmpn_bbox"
  type: "SmoothL1Loss"
  bottom: "rmpn_bbox_pred"
  bottom: "rmpn_bbox_targets"
  bottom: 'rmpn_bbox_inside_weights'
  bottom: 'rmpn_bbox_outside_weights'
  top: "loss_rmpn_bbox"
  loss_weight: 1
  smooth_l1_loss_param { sigma: 3.0 }
}

#========= RoI Proposal ============

layer {
  name: "rmpn_cls_prob"
  type: "Softmax"
  bottom: "rmpn_cls_score_reshape"
  top: "rmpn_cls_prob"
}

layer {
  name: 'rmpn_cls_prob_reshape'
  type: 'Reshape'
  bottom: 'rmpn_cls_prob'
  top: 'rmpn_cls_prob_reshape'
  reshape_param { shape { dim: 0 dim: 18 dim: -1 dim: 0 } }
}


layer {
  name: "rmpn_method_prob"
  type: "Softmax"
  bottom: "rmpn_method_score_reshape"
  top: "rmpn_method_prob"
}

layer {
  name: 'rmpn_method_prob_reshape'
  type: 'Reshape'
  bottom: 'rmpn_method_prob'
  top: 'rmpn_method_prob_reshape'
  reshape_param { shape { dim: 0 dim: 18 dim: -1 dim: 0 } }
}


layer {
  name: 'proposal-multimodal'
  type: 'Python'
  bottom: 'rmpn_cls_prob_reshape'
  bottom: 'rmpn_bbox_pred'
  bottom: 'im_info'
  bottom: 'rmpn_method_prob_reshape'
  top: 'rmpn_rois_rgb'
  top: 'rmpn_rois_depth'
#  top: 'rmpn_scores'
  python_param {
    module: 'rmpn.proposal_layer'
    layer: 'ProposalLayer'
    param_str: "'feat_stride': 16"
  }
}

layer {
  name: 'roi-data'
  type: 'Python'
  bottom: 'rmpn_rois_rgb'
  bottom: 'gt_boxes'
  bottom: 'rmpn_rois_depth'
  top: 'rois_rgb'
  top: 'labels'
  top: 'bbox_targets'
  top: 'bbox_inside_weights'
  top: 'bbox_outside_weights'
  top: 'rois_depth'
  top: 'labels_depth'
  top: 'bbox_targets_depth'
  top: 'bbox_inside_weights_depth'
  top: 'bbox_outside_weights_depth'
  python_param {
    module: 'rmpn.proposal_target_layer'
    layer: 'ProposalTargetLayer'
    param_str: "'num_classes': 41"
  }
}

#========= RCNN RGB ============

layer {
  name: "roi_pool5"
  type: "ROIPooling"
  bottom: "conv5"
  bottom: "rois_rgb"
  top: "pool5"
  roi_pooling_param {
    pooled_w: 6
    pooled_h: 6
    spatial_scale: 0.0625 # 1/16
  }
}
layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc6"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6"
  top: "fc6"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7"
  type: "InnerProduct"
  bottom: "fc6"
  top: "fc7"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 1024
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7"
  top: "fc7"
}
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "fc7"
  top: "fc7"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "cls_score"
  type: "InnerProduct"
  bottom: "fc7"
  top: "cls_score"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 41
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "bbox_pred"
  type: "InnerProduct"
  bottom: "fc7"
  top: "bbox_pred"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 164
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss_cls"
  type: "SoftmaxWithLoss"
  bottom: "cls_score"
  bottom: "labels"
  propagate_down: 1
  propagate_down: 0
  top: "loss_cls"
  loss_weight: 1
}
layer {
  name: "loss_bbox"
  type: "SmoothL1Loss"
  bottom: "bbox_pred"
  bottom: "bbox_targets"
  bottom: "bbox_inside_weights"
  bottom: "bbox_outside_weights"
  top: "loss_bbox"
  loss_weight: 1
}


#========= RCNN DEPTH ============

layer {
  name: "roi_pool5_depth"
  type: "ROIPooling"
  bottom: "conv5"
  bottom: "rois_depth"
  top: "pool5_depth"
  roi_pooling_param {
    pooled_w: 6
    pooled_h: 6
    spatial_scale: 0.0625 # 1/16
  }
}
layer {
  name: "fc6_depth"
  type: "InnerProduct"
  bottom: "pool5_depth"
  top: "fc6_depth"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "relu6_depth"
  type: "ReLU"
  bottom: "fc6_depth"
  top: "fc6_depth"
}
layer {
  name: "drop6_depth"
  type: "Dropout"
  bottom: "fc6_depth"
  top: "fc6_depth"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7_depth"
  type: "InnerProduct"
  bottom: "fc6_depth"
  top: "fc7_depth"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 1024
  }
}
layer {
  name: "relu7_depth"
  type: "ReLU"
  bottom: "fc7_depth"
  top: "fc7_depth"
}
layer {
  name: "drop7_depth"
  type: "Dropout"
  bottom: "fc7_depth"
  top: "fc7_depth"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "cls_score_depth"
  type: "InnerProduct"
  bottom: "fc7_depth"
  top: "cls_score_depth"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 41
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "bbox_pred_depth"
  type: "InnerProduct"
  bottom: "fc7_depth"
  top: "bbox_pred_depth"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 164
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss_cls_depth"
  type: "SoftmaxWithLoss"
  bottom: "cls_score_depth"
  bottom: "labels_depth"
  propagate_down: 1
  propagate_down: 0
  top: "loss_cls_depth"
  loss_weight: 1
}
layer {
  name: "loss_bbox_depth"
  type: "SmoothL1Loss"
  bottom: "bbox_pred_depth"
  bottom: "bbox_targets_depth"
  bottom: "bbox_inside_weights_depth"
  bottom: "bbox_outside_weights_depth"
  top: "loss_bbox_depth"
  loss_weight: 1
}



#========= LOSS METHOD PROPOSAL ============


layer {
  name: "loss_final_method_proposal"
  type: "python"
  bottom: "rmpn_method_score_reshape"
  bottom: "rois_rgb"
  bottom: "rois_depth"
  bottom: "cls_score"
  bottom: "cls_score_depth"
  bottom: "cls_score_depth"
  top: "loss_final_method_proposal"
}
